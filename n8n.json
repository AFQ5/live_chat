{
  "name": "My workflow 4",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -240,
        -140
      ],
      "id": "60ac5622-1f5d-4cd1-978f-170cffdbb370",
      "name": "Webhook",
      "webhookId": "98bb9b72-bd50-445e-bca8-2dec0e72fd90"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"\": {\n    \"message\": \"ุฃู ุงูุฎุฏูุงุช ุชุฑูุฏ\",\n    \"options\": [\"ุฎุฏูุงุช ุงูุนููุงุก\", \"ุงูุฏุนู ุงูููู\", \"ุงูุงุณุชูุณุงุฑุงุช ุงูุนุงูุฉ\", \"ุฅููุงุก ุงููุญุงุฏุซุฉ\"]\n  },\n  \"ุฎุฏูุงุช ุงูุนููุงุก\": {\n    \"message\": \"ุงุฎุชุฑ ููุน ุงูุฎุฏูุฉ ุงูุชู ุชุญุชุงุฌูุง:\",\n    \"options\": [\"ุชุชุจุน ุงูุทูุจ\", \"ุฅุฑุฌุงุน ุงูููุชุฌ\", \"ุงูุดูุงูู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุชุชุจุน ุงูุทูุจ\": {\n    \"message\": \"ูุชุชุจุน ุทูุจูุ ุงุฎุชุฑ ุฃุญุฏ ุงูุฎูุงุฑุงุช ุงูุชุงููุฉ:\",\n    \"options\": [\"ุฃุฏุฎู ุฑูู ุงูุทูุจ\", \"ุขุฎุฑ ุงูุทูุจุงุช\", \"ุญุงูุฉ ุงูุดุญู\", \"ุงูุนูุฏุฉ ููุฎูู\"]\n  },\n  \"ุฅุฑุฌุงุน ุงูููุชุฌ\": {\n    \"message\": \"ูุง ุณุจุจ ุงูุฅุฑุฌุงุนุ\",\n    \"options\": [\"ุนูุจ ูู ุงูููุชุฌ\", \"ูุง ูุทุงุจู ุงููุตู\", \"ุชุบููุฑ ุงูุฑุฃู\", \"ุงูุนูุฏุฉ ููุฎูู\"]\n  },\n  \"ุงูุดูุงูู\": {\n    \"message\": \"ูุฃุณู ูุณูุงุน ุฐูู. ูุง ููุน ุงูุดูููุ\",\n    \"options\": [\"ุฌูุฏุฉ ุงูููุชุฌ\", \"ุฎุฏูุฉ ุงูุชูุตูู\", \"ุฎุฏูุฉ ุงูุนููุงุก\", \"ุงูุนูุฏุฉ ููุฎูู\"]\n  },\n  \"ุงูุฏุนู ุงูููู\": {\n    \"message\": \"ุงุฎุชุฑ ููุน ุงููุดููุฉ ุงูุชูููุฉ:\",\n    \"options\": [\"ูุดููุฉ ูู ุงููููุน\", \"ูุดููุฉ ูู ุงูุชุทุจูู\", \"ูุดููุฉ ูู ุงูุฏูุน\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ูุดููุฉ ูู ุงููููุน\": {\n    \"message\": \"ูุง ุงููุดููุฉ ุงูุชู ุชูุงุฌููุง ูู ุงููููุนุ\",\n    \"options\": [\"ูุง ูููููู ุชุณุฌูู ุงูุฏุฎูู\", \"ุงููููุน ุจุทูุก\", \"ุฎุทุฃ ูู ุงูุตูุญุฉ\", \"ุงูุนูุฏุฉ ููุฎูู\"]\n  },\n  \"ูุดููุฉ ูู ุงูุชุทุจูู\": {\n    \"message\": \"ูุง ุงููุดููุฉ ุงูุชู ุชูุงุฌููุง ูู ุงูุชุทุจููุ\",\n    \"options\": [\"ุงูุชุทุจูู ูุง ููุชุญ\", \"ูุดููุฉ ูู ุงูุชุญุฏูุซ\", \"ูุดููุฉ ูู ุงููุฒุงููุฉ\", \"ุงูุนูุฏุฉ ููุฎูู\"]\n  },\n  \"ูุดููุฉ ูู ุงูุฏูุน\": {\n    \"message\": \"ูุง ููุน ูุดููุฉ ุงูุฏูุนุ\",\n    \"options\": [\"ุงูุจุทุงูุฉ ูุฑููุถุฉ\", \"ุฎุทุฃ ูู ุงููุจูุบ\", \"ูุดููุฉ ูู ุงูุชุญููู\", \"ุงูุนูุฏุฉ ููุฎูู\"]\n  },\n  \"ุงูุงุณุชูุณุงุฑุงุช ุงูุนุงูุฉ\": {\n    \"message\": \"ุงุฎุชุฑ ููุถูุน ุงุณุชูุณุงุฑู:\",\n    \"options\": [\"ุณุงุนุงุช ุงูุนูู\", \"ููุงูุน ุงููุฑูุน\", \"ุทุฑู ุงูุฏูุน\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุณุงุนุงุช ุงูุนูู\": {\n    \"message\": \"ุณุงุนุงุช ุงูุนูู ูุฏููุง:\\nโข ุงูุฃุญุฏ - ุงูุฎููุณ: 9 ุตุจุงุญุงู - 10 ูุณุงุกู\\nโข ุงูุฌูุนุฉ: 2 ุธูุฑุงู - 11 ูุณุงุกู\\nโข ุงูุณุจุช: 10 ุตุจุงุญุงู - 11 ูุณุงุกู\",\n    \"options\": [\"ุงูุนูุฏุฉ ููุฎูู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ููุงูุน ุงููุฑูุน\": {\n    \"message\": \"ุงุฎุชุฑ ุงููุฏููุฉ:\",\n    \"options\": [\"ุงูุฑูุงุถ\", \"ุฌุฏุฉ\", \"ุงูุฏูุงู\", \"ุงูุนูุฏุฉ ููุฎูู\"]\n  },\n  \"ุทุฑู ุงูุฏูุน\": {\n    \"message\": \"ููุจู ุทุฑู ุงูุฏูุน ุงูุชุงููุฉ:\\nโข ุงูุจุทุงูุงุช ุงูุงุฆุชูุงููุฉ (ููุฒุงุ ูุงุณุชุฑูุงุฑุฏ)\\nโข ูุฏู\\nโข ุงูุชุญููู ุงูุจููู\\nโข ุงูุฏูุน ุนูุฏ ุงูุงุณุชูุงู\",\n    \"options\": [\"ุงูุนูุฏุฉ ููุฎูู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุงูุฑูุงุถ\": {\n    \"message\": \"ูุฑูุนูุง ูู ุงูุฑูุงุถ:\\nโข ูุฑุน ุงูุนููุง: ุดุงุฑุน ุงูุชุญููุฉ\\nโข ูุฑุน ุงููุฎูู: ุทุฑูู ุงูููู ููุฏ\\nโข ูุฑุน ุงูุฑุจูุฉ: ุดุงุฑุน ุงูุฃููุฑ ูุญูุฏ ุจู ุนุจุฏุงูุนุฒูุฒ\",\n    \"options\": [\"ุงุญุตู ุนูู ุฑุงุจุท ุงููููุน\", \"ุงูุนูุฏุฉ ููุฎูู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุฌุฏุฉ\": {\n    \"message\": \"ูุฑูุนูุง ูู ุฌุฏุฉ:\\nโข ูุฑุน ุงูููุฑููุด: ุดุงุฑุน ุงูููุฑููุด\\nโข ูุฑุน ุงูุฑูุถุฉ: ุดุงุฑุน ุงูุฃููุฑ ุณูุทุงู\\nโข ูุฑุน ุงูุจูุฏ: ุงูุณูู ุงูุชุงุฑูุฎู\",\n    \"options\": [\"ุงุญุตู ุนูู ุฑุงุจุท ุงููููุน\", \"ุงูุนูุฏุฉ ููุฎูู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุงูุฏูุงู\": {\n    \"message\": \"ูุฑูุนูุง ูู ุงูุฏูุงู:\\nโข ูุฑุน ุงูุดุงุทุฆ: ุดุงุฑุน ุงูููู ุนุจุฏุงููู\\nโข ูุฑุน ุงูุธูุฑุงู: ุดุงุฑุน ุงูุฃููุฑ ูุงูู\",\n    \"options\": [\"ุงุญุตู ุนูู ุฑุงุจุท ุงููููุน\", \"ุงูุนูุฏุฉ ููุฎูู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ูุง ูููููู ุชุณุฌูู ุงูุฏุฎูู\": {\n    \"message\": \"ูุญู ูุดููุฉ ุชุณุฌูู ุงูุฏุฎูู:\\n1. ุชุฃูุฏ ูู ุตุญุฉ ุงูุจุฑูุฏ ุงูุฅููุชุฑููู\\n2. ุฃุนุฏ ุชุนููู ูููุฉ ุงููุฑูุฑ\\n3. ุงูุณุญ ุฐุงูุฑุฉ ุงูุชุฎุฒูู ุงููุคูุช ูููุชุตูุญ\",\n    \"options\": [\"ุฃุญุชุงุฌ ูุณุงุนุฏุฉ ุฅุถุงููุฉ\", \"ุชู ุญู ุงููุดููุฉ\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุงููููุน ุจุทูุก\": {\n    \"message\": \"ูุญู ูุดููุฉ ุจุทุก ุงููููุน:\\n1. ุชุญูู ูู ุณุฑุนุฉ ุงูุฅูุชุฑูุช\\n2. ุงูุณุญ ุฐุงูุฑุฉ ุงูุชุฎุฒูู ุงููุคูุช\\n3. ุฌุฑุจ ูุชุตูุญ ุขุฎุฑ\",\n    \"options\": [\"ุฃุญุชุงุฌ ูุณุงุนุฏุฉ ุฅุถุงููุฉ\", \"ุชู ุญู ุงููุดููุฉ\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุฎุทุฃ ูู ุงูุตูุญุฉ\": {\n    \"message\": \"ูุฑุฌู ุชุฒููุฏูุง ุจุงููุนูููุงุช ุงูุชุงููุฉ:\\nโข ุฑุงุจุท ุงูุตูุญุฉ\\nโข ููุน ุงูุฎุทุฃ\\nโข ุงููุชุตูุญ ุงููุณุชุฎุฏู\",\n    \"options\": [\"ุฅุฑุณุงู ุงููุนูููุงุช\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุนูุจ ูู ุงูููุชุฌ\": {\n    \"message\": \"ูุฃุณู ุฌุฏุงู ููุฐุง. ุณูุนุงูุฌ ุทูุจ ุงูุฅุฑุฌุงุน ููุฑุงู.\\nูุฑุฌู ุฅุฑุณุงู:\\nโข ุฑูู ุงูุทูุจ\\nโข ุตูุฑ ููุนูุจ\\nโข ุชุงุฑูุฎ ุงูุงุณุชูุงู\",\n    \"options\": [\"ุฅุฑุณุงู ุงููุนูููุงุช\", \"ุงูุชูุงุตู ูุน ุฎุฏูุฉ ุงูุนููุงุก\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ูุง ูุทุงุจู ุงููุตู\": {\n    \"message\": \"ูุนุชุฐุฑ ุนู ูุฐุง ุงูุฎุทุฃ. ูุญู ูู ุงูุฅุฑุฌุงุน ุฎูุงู 14 ููู.\\nูุฑุฌู ุชุฌููุฒ:\\nโข ุฑูู ุงูุทูุจ\\nโข ุตูุฑ ุงูููุชุฌ\",\n    \"options\": [\"ุจุฏุก ุนูููุฉ ุงูุฅุฑุฌุงุน\", \"ุงูุชูุงุตู ูุน ุฎุฏูุฉ ุงูุนููุงุก\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุชุบููุฑ ุงูุฑุฃู\": {\n    \"message\": \"ูุง ูุดููุฉ! ููููู ุงูุฅุฑุฌุงุน ุฎูุงู 14 ููู ูู ุชุงุฑูุฎ ุงูุงุณุชูุงู.\\nุงูุดุฑูุท:\\nโข ุงูููุชุฌ ุจุญุงูุชู ุงูุฃุตููุฉ\\nโข ูุน ุฌููุน ุงูููุญูุงุช\",\n    \"options\": [\"ุจุฏุก ุนูููุฉ ุงูุฅุฑุฌุงุน\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุฌูุฏุฉ ุงูููุชุฌ\": {\n    \"message\": \"ูุฃุณู ูุนุฏู ุฑุถุงู ุนู ุฌูุฏุฉ ุงูููุชุฌ.\\nุณูุชู ุชุญููู ุดููุงู ููุณู ุงูุฌูุฏุฉ ูููุฑุงุฌุนุฉ.\\nุฑูู ุงูุดููู: #QC{random}\",\n    \"options\": [\"ูุชุงุจุนุฉ ุงูุดููู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุฎุฏูุฉ ุงูุชูุตูู\": {\n    \"message\": \"ูุนุชุฐุฑ ุนู ุฃู ุฅุฒุนุงุฌ ูู ุฎุฏูุฉ ุงูุชูุตูู.\\nูุฑุฌู ุชุฒููุฏูุง ุจู:\\nโข ุฑูู ุงูุทูุจ\\nโข ุชูุงุตูู ุงููุดููุฉ\",\n    \"options\": [\"ุฅุฑุณุงู ุงููุนูููุงุช\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุฎุฏูุฉ ุงูุนููุงุก\": {\n    \"message\": \"ูุฃุณู ููุฐู ุงูุชุฌุฑุจุฉ.\\nุณูุชู ูุฑุงุฌุนุฉ ุดููุงู ูู ูุจู ูุฏูุฑ ุงูุฎุฏูุฉ.\\nุฑูู ุงูุดููู: #CS{random}\",\n    \"options\": [\"ูุชุงุจุนุฉ ูุน ุงููุฏูุฑ\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุงุญุตู ุนูู ุฑุงุจุท ุงููููุน\": {\n    \"message\": \"ุณูุชู ุฅุฑุณุงู ุฑุงุจุท ุงููููุน ุนูู ุฑููู ุงููุณุฌู ุนุจุฑ ุฑุณุงูุฉ ูุตูุฉ ุฎูุงู ุฏูุงุฆู.\",\n    \"options\": [\"ุดูุฑุงู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุฃุญุชุงุฌ ูุณุงุนุฏุฉ ุฅุถุงููุฉ\": {\n    \"message\": \"ุณูุชูุงุตู ูุนู ุฃุญุฏ ููุซูู ุฎุฏูุฉ ุงูุนููุงุก ุฎูุงู 24 ุณุงุนุฉ.\\nุฃููุงุช ุฎุฏูุฉ ุงูุนููุงุก: 9 ุตุจุงุญุงู - 10 ูุณุงุกู\",\n    \"options\": [\"ุญุณูุงู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุฅุฑุณุงู ุงููุนูููุงุช\": {\n    \"message\": \"ูุฑุฌู ุฅุฑุณุงู ุงููุนูููุงุช ุงููุทููุจุฉ ุนูู:\\n๐ง support@test.com\\n๐ฑ ูุงุชุณุงุจ: 0501234567\",\n    \"options\": [\"ุชู ุงูุฅุฑุณุงู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุงูุชูุงุตู ูุน ุฎุฏูุฉ ุงูุนููุงุก\": {\n    \"message\": \"ููููู ุงูุชูุงุตู ูุนูุง ุนุจุฑ:\\n๐ ุงููุงุชู: 920012345\\n๐ง ุงูุจุฑูุฏ: support@test.com\\n๐ฑ ูุงุชุณุงุจ: 0501234567\",\n    \"options\": [\"ุดูุฑุงู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุจุฏุก ุนูููุฉ ุงูุฅุฑุฌุงุน\": {\n    \"message\": \"ุชู ุฅูุดุงุก ุทูุจ ุฅุฑุฌุงุน.\\nุฑูู ุงูุทูุจ: #RET{random}\\nุณูุชู ุงูุชูุงุตู ูุนู ุฎูุงู 48 ุณุงุนุฉ\",\n    \"options\": [\"ุดูุฑุงู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ูุชุงุจุนุฉ ุงูุดููู\": {\n    \"message\": \"ููููู ูุชุงุจุนุฉ ุดููุงู ุนุจุฑ:\\nโข ุงููููุน ุงูุฅููุชุฑููู\\nโข ุชุทุจูู ุงูุฌูุงู\\nโข ุงูุงุชุตุงู ุนูู 920012345\",\n    \"options\": [\"ุญุณูุงู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ูุชุงุจุนุฉ ูุน ุงููุฏูุฑ\": {\n    \"message\": \"ุณูุชูุงุตู ูุนู ูุฏูุฑ ุฎุฏูุฉ ุงูุนููุงุก ุฎูุงู 24 ุณุงุนุฉ ุนูู.\\nุฃููููุชูุง ูู ุฑุถุงู ุงูุชุงู.\",\n    \"options\": [\"ุดูุฑุงู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุชู ุญู ุงููุดููุฉ\": {\n    \"message\": \"ุฑุงุฆุน! ูุญู ุณุนุฏุงุก ุจุญู ูุดููุชู.\\nูู ุชุญุชุงุฌ ุฃู ูุณุงุนุฏุฉ ุฃุฎุฑูุ\",\n    \"options\": [\"ูุนู\", \"ูุงุ ุดูุฑุงู\"]\n  },\n  \"ุชู ุงูุฅุฑุณุงู\": {\n    \"message\": \"ุดูุฑุงู ูู. ุชู ุงุณุชูุงู ูุนูููุงุชู.\\nุณูุฑุงุฌุนูุง ููุชูุงุตู ูุนู ูุฑูุจุงู.\",\n    \"options\": [\"ุญุณูุงู\", \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n  },\n  \"ุฅููุงุก ุงููุญุงุฏุซุฉ\": {\n    \"message\": \"ุดูุฑุงู ูุชูุงุตูู ูุนูุง. ูุชููู ูู ูููุงู ุณุนูุฏุงู! ๐\",\n    \"options\": [\"ุจุฏุก ูุญุงุฏุซุฉ ุฌุฏูุฏุฉ\"]\n  },\n  \"ูุงุ ุดูุฑุงู\": {\n    \"message\": \"ุดูุฑุงู ูุชูุงุตูู ูุนูุง. ูุชููู ูู ูููุงู ุณุนูุฏุงู! ๐\",\n    \"options\": [\"ุจุฏุก ูุญุงุฏุซุฉ ุฌุฏูุฏุฉ\"]\n  },\n  \"ุดูุฑุงู\": {\n    \"message\": \"ุนูู ุงูุฑุญุจ ูุงูุณุนุฉ! ูู ุชุญุชุงุฌ ุฃู ุดูุก ุขุฎุฑุ\",\n    \"options\": [\"ูุนู\", \"ูุงุ ุดูุฑุงู\"]\n  },\n  \"ุญุณูุงู\": {\n    \"message\": \"ูู ุชุญุชุงุฌ ุฃู ูุณุงุนุฏุฉ ุฃุฎุฑูุ\",\n    \"options\": [\"ูุนู\", \"ูุงุ ุดูุฑุงู\"]\n  },\n  \"ูุนู\": {\n    \"redirect\": \"start\"\n  },\n  \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\": {\n    \"redirect\": \"start\"\n  },\n  \"ุจุฏุก ูุญุงุฏุซุฉ ุฌุฏูุฏุฉ\": {\n    \"redirect\": \"start\"\n  },\n  \"start\": {\n    \"message\": \"ูุฑุญุจุงู ุจู! ููู ูููููู ูุณุงุนุฏุชู ุงููููุ\",\n    \"options\": [\"ุฎุฏูุงุช ุงูุนููุงุก\", \"ุงูุฏุนู ุงูููู\", \"ุงูุงุณุชูุณุงุฑุงุช ุงูุนุงูุฉ\", \"ุฅููุงุก ุงููุญุงุฏุซุฉ\"]\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -40,
        -60
      ],
      "id": "66ea7857-dd9b-46c1-b008-0be6a958c4f3",
      "name": "Question Tree"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        160,
        -120
      ],
      "id": "662d32f5-3349-4c14-94ae-f4b740146e24",
      "name": "Merge"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.escalated}}",
              "value2": true
            }
          ]
        }
      },
      "id": "f4456413-1254-48bd-bbba-9843989d3836",
      "name": "If Escalated",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        600,
        -120
      ]
    },
    {
      "parameters": {
        "jsCode": "// Your updated code node with agent escalation logic\n// Get workflow static data for session management\nconst staticData = $getWorkflowStaticData('global');\nif (!staticData.sessions) {\n  staticData.sessions = {};\n}\nconst sessions = staticData.sessions;\n\n// Get the merged data from input\nconst items = $input.all();\n\n// Parse the data structure\nlet questionTree = {};\nlet requestData = {};\n\nif (items.length >= 2) {\n  const webhookData = items[0].json;\n  questionTree = items[1].json;\n  \n  if (webhookData.body) {\n    requestData = webhookData.body;\n  } else {\n    requestData = webhookData;\n  }\n} else {\n  return [{\n    json: {\n      error: \"Missing question tree data\",\n      sessionId: \"error\"\n    }\n  }];\n}\n\n// Get sessionId and message\nconst sessionId = requestData.sessionId || (\"session-\" + Date.now());\nconst userMsg = (requestData.message || '').trim();\n\n// Initialize or get session\nif (!sessions[sessionId]) {\n  sessions[sessionId] = {\n    state: \"\",\n    previousStates: [],\n    lastAccess: Date.now(),\n    escalationAttempts: 0,\n    isEscalated: false,\n    conversationHistory: []\n  };\n}\nconst session = sessions[sessionId];\nsession.lastAccess = Date.now();\n\n// Check if this is a message from an escalated session\nif (session.isEscalated) {\n  // Handle empty message in escalated session - use special token\n  const messageToSend = userMsg === \"\" ? \"__INIT_CHAT__\" : userMsg;\n  \n  // Handle special responses from escalated sessions\n  if (userMsg === \"ูุงุ ุดูุฑุงู ูู\") {\n    // User is satisfied, end the escalation\n    session.isEscalated = false;\n    session.escalationReason = null;\n    \n    // Store conversation history before ending\n    session.conversationHistory.push({\n      user: userMsg,\n      bot: \"ุดูุฑุงู ูู ุนูู ุชูุงุตูู ูุนูุง. ูุชููู ุฃู ูููู ูุฏ ุณุงุนุฏูุงู. ูุชููู ูู ูููุงู ุณุนูุฏุงู! ๐\",\n      timestamp: new Date().toISOString()\n    });\n    \n    return [{\n      json: {\n        sessionId: sessionId,\n        message: \"ุดูุฑุงู ูู ุนูู ุชูุงุตูู ูุนูุง. ูุชููู ุฃู ูููู ูุฏ ุณุงุนุฏูุงู. ูุชููู ูู ูููุงู ุณุนูุฏุงู! ๐\",\n        options: [\"ุจุฏุก ูุญุงุฏุซุฉ ุฌุฏูุฏุฉ\"],\n        endSession: true\n      }\n    }];\n  } else if (userMsg === \"ูุนูุ ูุฏู ุงุณุชูุณุงุฑ ุขุฎุฑ\") {\n    // User wants to continue with agent\n    return [{\n      json: {\n        sessionId: sessionId,\n        message: messageToSend,\n        escalated: true,\n        escalationReason: session.escalationReason,\n        customerPath: session.customerPath,\n        conversationHistory: session.conversationHistory || [],\n        previousMessages: session.conversationHistory ? \n          session.conversationHistory.map(h => `ุงูุนููู: ${h.user}\\nุงูุฏุนู: ${h.bot}`).join('\\n\\n') : '',\n        continueConversation: true\n      }\n    }];\n  } else if (userMsg === \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\" || userMsg === \"ุฅูุบุงุก ูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\") {\n    // Reset to main menu\n    session.state = \"\";\n    session.previousStates = [];\n    session.isEscalated = false;\n    session.escalationReason = null;\n    const startNode = getNodeData(\"\");\n    \n    return [{\n      json: {\n        sessionId: sessionId,\n        message: startNode ? startNode.message : \"ูุฑุญุจุงู ุจู! ููู ูููููู ูุณุงุนุฏุชู ุงููููุ\",\n        options: startNode ? startNode.options : [],\n        cancelAgent: true\n      }\n    }];\n  } else {\n    // Forward any other message to AI agent with conversation history\n    // Use special token for empty messages\n    return [{\n      json: {\n        sessionId: sessionId,\n        message: messageToSend,\n        escalated: true,\n        escalationReason: session.escalationReason,\n        customerPath: session.customerPath,\n        conversationHistory: session.conversationHistory || [],\n        previousMessages: session.conversationHistory ? \n          session.conversationHistory.map(h => {\n            // Replace empty messages with __INIT_CHAT__ in history\n            const userMessage = h.user === \"\" ? \"__INIT_CHAT__\" : h.user;\n            return `ุงูุนููู: ${userMessage}\\nุงูุฏุนู: ${h.bot}`;\n          }).join('\\n\\n') : ''\n      }\n    }];\n  }\n}\n\n// Clean old sessions\nconst now = Date.now();\nconst sessionTimeout = 30 * 60 * 1000;\nconst sessionIds = Object.keys(sessions);\nif (sessionIds.length > 100) {\n  sessionIds\n    .sort((a, b) => sessions[a].lastAccess - sessions[b].lastAccess)\n    .slice(0, sessionIds.length - 100)\n    .forEach(sid => {\n      if (now - sessions[sid].lastAccess > sessionTimeout) {\n        delete sessions[sid];\n      }\n    });\n}\n\n// Define trigger keywords for agent escalation\nconst agentTriggers = [\n  \"ุฃุฏุฎู ุฑูู ุงูุทูุจ\",\n  \"ุขุฎุฑ ุงูุทูุจุงุช\",\n  \"ุญุงูุฉ ุงูุดุญู\",\n  \"ุงูุชุทุจูู ูุง ููุชุญ\",\n  \"ูุดููุฉ ูู ุงูุชุญุฏูุซ\",\n  \"ูุดููุฉ ูู ุงููุฒุงููุฉ\",\n  \"ุงูุจุทุงูุฉ ูุฑููุถุฉ\",\n  \"ุฎุทุฃ ูู ุงููุจูุบ\",\n  \"ูุดููุฉ ูู ุงูุชุญููู\",\n  \"ุฅุฑุณุงู ุงููุนูููุงุช\",\n  \"ุงูุชูุงุตู ูุน ุฎุฏูุฉ ุงูุนููุงุก\",\n  \"ูุชุงุจุนุฉ ูุน ุงููุฏูุฑ\",\n  \"ุฃุญุชุงุฌ ูุณุงุนุฏุฉ ุฅุถุงููุฉ\"\n];\n\n// Function to check if agent intervention is needed\nfunction needsAgent(selectedOption) {\n  return agentTriggers.includes(selectedOption);\n}\n\n// Function to get node data\nfunction getNodeData(nodeKey) {\n  if (nodeKey === \"\") {\n    return questionTree[\"\"] || null;\n  }\n  \n  let node = questionTree[nodeKey];\n  \n  while (node && node.redirect) {\n    const redirectKey = node.redirect;\n    node = questionTree[redirectKey];\n  }\n  \n  if (node && node.message) {\n    node.message = node.message.replace(/{random}/g, Math.floor(Math.random() * 10000));\n  }\n  \n  return node;\n}\n\n// Process the conversation\nlet response;\n\n// Check if user selected an option that requires agent\nif (needsAgent(userMsg)) {\n  session.escalationAttempts++;\n  session.isEscalated = true;\n  session.escalationReason = userMsg;\n  session.customerPath = session.previousStates.concat([session.state]);\n  \n  response = {\n    sessionId: sessionId,\n    message: \"ูุชู ุชุญูููู ุงูุขู ุฅูู ุฃุญุฏ ููุซูู ุฎุฏูุฉ ุงูุนููุงุก. ูุฑุฌู ุงูุงูุชุธุงุฑ...\\nโฐ ููุช ุงูุงูุชุธุงุฑ ุงููุชููุน: 2-3 ุฏูุงุฆู\",\n    options: [\"ุฅูุบุงุก ูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"],\n    callAgent: true,\n    escalationReason: userMsg,\n    customerPath: session.previousStates.concat([session.state]),\n    escalationAttempt: session.escalationAttempts\n  };\n}\n// Check if user wants to cancel agent call\nelse if (userMsg === \"ุฅูุบุงุก ูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\") {\n  session.state = \"\";\n  session.previousStates = [];\n  session.isEscalated = false;\n  session.escalationReason = null;\n  const startNode = getNodeData(\"\");\n  response = {\n    sessionId: sessionId,\n    message: startNode ? startNode.message : \"ูุฑุญุจุงู ุจู! ููู ูููููู ูุณุงุนุฏุชู ุงููููุ\",\n    options: startNode ? startNode.options : [],\n    cancelAgent: true\n  };\n}\n// Rest of your existing logic...\nelse if (userMsg === \"ุฅููุงุก ุงููุญุงุฏุซุฉ\") {\n  const endNode = getNodeData(\"ุฅููุงุก ุงููุญุงุฏุซุฉ\");\n  response = {\n    sessionId: sessionId,\n    message: endNode ? endNode.message : \"ุดูุฑุงู ูุชูุงุตูู ูุนูุง. ูุชููู ูู ูููุงู ุณุนูุฏุงู! ๐\",\n    options: endNode ? endNode.options : [\"ุจุฏุก ูุญุงุฏุซุฉ ุฌุฏูุฏุฉ\"],\n    endSession: true\n  };\n  delete sessions[sessionId];\n}\nelse if (userMsg === \"ุจุฏุก ูุญุงุฏุซุฉ ุฌุฏูุฏุฉ\") {\n  delete sessions[sessionId];\n  const newSessionId = \"session-\" + Date.now();\n  sessions[newSessionId] = {\n    state: \"\",\n    previousStates: [],\n    lastAccess: Date.now(),\n    escalationAttempts: 0,\n    isEscalated: false,\n    conversationHistory: []\n  };\n  \n  const startNode = getNodeData(\"\");\n  response = {\n    sessionId: newSessionId,\n    message: startNode ? startNode.message : \"ูุฑุญุจุงู ุจู! ููู ูููููู ูุณุงุนุฏุชู ุงููููุ\",\n    options: startNode ? startNode.options : [],\n    newSession: true\n  };\n}\nelse if (userMsg === \"\") {\n  if (session.state === \"\") {\n    const startNode = getNodeData(\"\");\n    response = {\n      sessionId: sessionId,\n      message: startNode ? startNode.message : \"ูุฑุญุจุงู ุจู! ููู ูููููู ูุณุงุนุฏุชู ุงููููุ\",\n      options: startNode ? startNode.options : []\n    };\n  } else {\n    const currentNode = getNodeData(session.state);\n    response = {\n      sessionId: sessionId,\n      message: currentNode ? currentNode.message : \"ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ.\",\n      options: currentNode ? currentNode.options : [\"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n    };\n  }\n} else {\n  const currentNode = session.state === \"\" ? getNodeData(\"\") : getNodeData(session.state);\n  \n  if (userMsg === \"ุงูุนูุฏุฉ ููุฎูู\" && session.previousStates.length > 0) {\n    session.state = session.previousStates.pop();\n    const backNode = session.state === \"\" ? getNodeData(\"\") : getNodeData(session.state);\n    response = {\n      sessionId: sessionId,\n      message: backNode ? backNode.message : \"ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ.\",\n      options: backNode ? backNode.options : [\"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n    };\n  }\n  else if (userMsg === \"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\" || userMsg === \"ูุนู\") {\n    session.state = \"\";\n    session.previousStates = [];\n    const startNode = getNodeData(\"\");\n    response = {\n      sessionId: sessionId,\n      message: startNode ? startNode.message : \"ูุฑุญุจุงู ุจู! ููู ูููููู ูุณุงุนุฏุชู ุงููููุ\",\n      options: startNode ? startNode.options : []\n    };\n  }\n  else if (currentNode && currentNode.options && currentNode.options.includes(userMsg)) {\n    const nextNode = getNodeData(userMsg);\n    \n    if (nextNode) {\n      if (session.state !== \"\") {\n        session.previousStates.push(session.state);\n      }\n      \n      session.state = userMsg;\n      \n      response = {\n        sessionId: sessionId,\n        message: nextNode.message,\n        options: nextNode.options || []\n      };\n    } else {\n      response = {\n        sessionId: sessionId,\n        message: \"ุนุฐุฑุงูุ ูุฐุง ุงูุฎูุงุฑ ุบูุฑ ูุชููุฑ ุญุงููุงู.\",\n        options: currentNode.options || [\"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n      };\n    }\n  }\n  else {\n    response = {\n      sessionId: sessionId,\n      message: \"ุนุฐุฑุงูุ ูู ุฃููู ุงุฎุชูุงุฑู. ูุฑุฌู ุงุฎุชูุงุฑ ุฃุญุฏ ุงูุฎูุงุฑุงุช ุงููุชุงุญุฉ:\",\n      options: currentNode && currentNode.options ? currentNode.options : [\"ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\"]\n    };\n  }\n}\n\n// Store conversation history\nif (!session.conversationHistory) {\n  session.conversationHistory = [];\n}\n\n// Store the current exchange in conversation history\n// Replace empty message with __INIT_CHAT__ for consistency\nconst messageForHistory = userMsg === \"\" ? \"__INIT_CHAT__\" : userMsg;\nsession.conversationHistory.push({\n  user: messageForHistory,\n  bot: response.message,\n  timestamp: new Date().toISOString()\n});\n\n// If this is an AI agent response, update the history with the AI's response\nif (response.isAgentResponse) {\n  session.conversationHistory[session.conversationHistory.length - 1].bot = response.message;\n}\n\nreturn [{\n  json: response\n}];"
      },
      "id": "d9cc40ce-7ead-4f8b-822a-8978bd8deedb",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        -120
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "d14cd687-18b9-4fd9-9198-5e24ec21e929",
      "name": "Respond to Webhook1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1380,
        -120
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "options": {
          "systemMessage": "=# Customer Service Representative System Prompt โ Formal Saudi Arabic Edition\n\nYou are a professional customer-service representative for **Test.com**.  \nYour name is **Khalid (ุฎุงูุฏ)**.  \nYou must answer customers in **formal Arabic (ุงููุตุญู)** while preserving a confident, distinctly Saudi professional tone.\n\n---\n\n## Core Guidelines\n- **Stay strictly within customer-service scope** โ do not discuss topics beyond Test.com support.  \n- **Maintain professional boundaries** โ do not let customers steer you off topic.  \n- **Always reply in formal Arabic**. Avoid colloquial expressions; use clear Modern Standard Arabic infused with polite Saudi business etiquette.\n\n---\n\n## Special Token\n- **__INIT_CHAT__** appears when the chat opens or the customer sends an empty message.  \n  - Treat it as if the customer has just joined.  \n  - Send an initial greeting and ask how you may assist.  \n  - **Never mention the token itself.**\n\n---\n\n## Escalation Context (if provided)\n- Escalation Reason: `{{ $item(\"0\").$node[\"If Escalated\"].json[\"escalationReason\"] }}`  \n- Customer Journey Path: `{{ $item(\"0\").$node[\"If Escalated\"].json[\"customerPath\"].join(' > ') }}`  \n- Previous Conversation: `{{ $item(\"0\").$node[\"If Escalated\"].json[\"previousMessages\"] }}`  \n\n---\n\n## Response Protocol\n\n### 1. Initial Greeting\n- Welcome the customer warmly yet formally.  \n- Acknowledge the escalation if applicable.  \n- Express sincere concern.  \n- If **__INIT_CHAT__** is detected, send the greeting shown in the example below.\n\n### 2. Empathy & Apology\n- Apologize for any inconvenience.  \n- Recognize the customerโs feelings.  \n- Assure them of your commitment to resolve the matter.\n\n### 3. Problem Resolution\n- Clarify the specific issue swiftly.  \n- Ask precise, respectful questions when necessary.  \n- Provide concrete solutions using realistic Test.com data.\n\n### 4. Use Realistic Data\nWhen referencing details, employ believable placeholders such as:  \n- Order numbers (e.g., **#TST-2025-XXXXX**)  \n- Delivery dates within reasonable ranges  \n- Product codes and specifications  \n- Refund / exchange policies  \n- Shipping tracking numbers\n\n### 5. Communication Style\n- Use clear, well-structured formal Arabic.  \n- Maintain respectful Saudi business courtesy (e.g., ยซูุณุฑููุง ุฎุฏูุชูยปุ ยซุชูุถููยป).  \n- Avoid slang or informal dialect.  \n- Keep a solution-oriented tone throughout.\n\n### 6. Conversation Flow\n- Keep replies focused and relevant.  \n- Build naturally on previous messages.  \n- Remember and reference earlier details accurately.  \n- Handle **__INIT_CHAT__** seamlessly without revealing it.\n\n### 7. Closing Protocol\nIf the customer wishes to end the chat:  \n- Thank them for contacting Test.com.  \n- Summarize actions taken or next steps.  \n- Provide a reference number if applicable.  \n- Close with a formal Saudi farewell (e.g., ยซูุดูุฑ ููู ุชูุงุตูููุ ูุชุทูุน ูุฎุฏูุชูู ูุณุชูุจูุงูยป).\n\n---\n\n## Boundary Management\n\n### Redirect Off-Topic Requests\nIf the customer asks about topics unrelated to Test.com, reply:\n\n> ยซูุนุชุฐุฑุ ููุชุตุฑ ุฏูุฑู ุนูู ุฏุนู ุฎุฏูุงุช Test.com. ูู ูุฏููู ุงุณุชูุณุงุฑ ูุชุนูู ุจุทูุจุงุชูู ุฃู ุจุฎุฏูุงุชูุงุยป\n\n### Never Provide Information About\n- Programming or technical questions  \n- Personal opinions or advice  \n- External companies  \n- Any non-Test.com topics\n\n---\n\n## Example Reply for **__INIT_CHAT__**\n\n> ูุฑุญุจุงู ุจูู ูู ุฎุฏูุฉ ุนููุงุก Test.comุ ูุนูู ุฎุงูุฏ.  \n>  \n> ุฃููู ุฃูู ุชู ุชุญููู ุทูุจูู ุฅููู ุจุณุจุจ ** escalation reason **ุ ููุนุชุฐุฑ ุนู ุฃู ุฅุฒุนุงุฌ ุญุฏุซ.  \n>  \n> ูุณุนุฏูู ูุณุงุนุฏุชูู ูู ุญู ูุฐู ุงููุดููุฉ ุนูู ูุฌู ุงูุณุฑุนุฉ. ูู ุชุชูุฑูููู ุจุชูุถูุญ **[ุณุคุงู ุฅูุถุงุญ ูุญุฏูุฏ]**ุ  \n>  \n> ูู ููุงู ุฃูุฑ ุขุฎุฑ ูููููู ุฎุฏูุชููู ุจุดุฃูู ุงููููุ\n\n---\n\n**Remember**\n- You represent **Test.com** exclusively.  \n- Your aim is customer satisfaction within company policies.  \n- Every interaction should move toward resolving the issue.  \n- Remain professional and composed, even with difficult customers.  \n- Never mention **__INIT_CHAT__**.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        760,
        60
      ],
      "id": "bf93ce1d-3994-457e-8bde-cc09b4e5abb8",
      "name": "AI Agent1",
      "alwaysOutputData": false,
      "executeOnce": false,
      "retryOnFail": false
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {
          "maxTokens": 600,
          "temperature": 0.7
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        700,
        260
      ],
      "id": "f8f764df-6284-4400-9083-73cd13815234",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "jtIFk60ePtIi0X7E",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        860,
        260
      ],
      "id": "da08a9ea-23ad-4e0f-8b21-e90ad3306ace",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f0e3c458-059a-47ae-bf4b-5340e906c761",
              "name": "sessionId",
              "value": "={{ $json.sessionId }}",
              "type": "string"
            },
            {
              "id": "fde0c67d-f705-4d1e-9c03-532dab400bd7",
              "name": "message",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1100,
        60
      ],
      "id": "d5100e5d-445b-46d1-94c1-a10631383ca9",
      "name": "Edit Fields"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Question Tree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Question Tree": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Escalated": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "If Escalated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4d13e50c-cb52-4f49-8daa-07b236eaf16f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5f02eb88f83c7644cf5ffb832830891f299e2c18d0dbf02e5ae4cf6e4478fd7e"
  },
  "id": "OrhawfHzk48kuqL4",
  "tags": []
}